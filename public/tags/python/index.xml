<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Python on RIRSC</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on RIRSC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ricardo LÃ³pez - [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).</copyright>
    <lastBuildDate>Sat, 27 Nov 2021 19:08:53 +0100</lastBuildDate><atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>Block ads in WebKitGtk</title>
      <link>http://localhost:1313/posts/block_ads_in_webkitgtk/</link>
      <pubDate>Sat, 27 Nov 2021 19:08:53 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/block_ads_in_webkitgtk/</guid>
      <description><![CDATA[<p>One of the most requested features (and for a good reason) in Feeds has always been ad blocking.</p>
<p>I never came around to implement it, mostly because I couldn&rsquo;t find a guide or any similar resource, except for <a href="https://gitlab.gnome.org/GNOME/Epiphany">GNOME Web&rsquo;s source code</a>, and that&rsquo;s not exactly easy to navigate. At least, it isn&rsquo;t for me.</p>
<p>Today I decided to come back to it, and I found that it&rsquo;s actually a rather easy task! That&rsquo;s why I wanted to document this process, in hope that someone might find it useful one day.</p>
<p>First off, you&rsquo;ll need one or more <strong>blocklists</strong>, in JSON format. I used <a href="https://easylist.to/">EasyList</a>, in particular <a href="https://easylist-downloads.adblockplus.org/easylist_min_content_blocker.json">here&rsquo;s the link to the JSON block list</a>. Blocklists should be updated frequently, so it&rsquo;s advisable to have some sort of mechanism to download and update them at runtime automatically.</p>
<p>Let&rsquo;s now jump to the code, which will be Python in this case, but hopefully can be easily adapted to other languages.</p>
<p>I&rsquo;ll use some closures for convenience.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#6272a4"># have a function that downloads text</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">download_text</span>(url: <span style="color:#8be9fd;font-style:italic">str</span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">str</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># create the filter store somewhere in your code, ideally you should</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># only have one in your application</span>
</span></span><span style="display:flex;"><span>my_filter_store <span style="color:#ff79c6">=</span> WebKit2<span style="color:#ff79c6">.</span>UserContentFilterStore<span style="color:#ff79c6">.</span>new(<span style="color:#f1fa8c">&#39;some/cache/path&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># a name that will be used to save/retrieve blocklists from the store</span>
</span></span><span style="display:flex;"><span>BLOCKLIST_ID <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;blocklist&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">apply_adblock</span>(
</span></span><span style="display:flex;"><span>        webview: WebKit2<span style="color:#ff79c6">.</span>WebView,
</span></span><span style="display:flex;"><span>        filter_store: WebKit2<span style="color:#ff79c6">.</span>UserContentFilterStore,
</span></span><span style="display:flex;"><span>        blocklist_url: <span style="color:#8be9fd;font-style:italic">str</span>
</span></span><span style="display:flex;"><span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#ff79c6">None</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># 0: Retrieve the WebKit2.UserContentManager from the WebView</span>
</span></span><span style="display:flex;"><span>    content_manager <span style="color:#ff79c6">=</span> webview<span style="color:#ff79c6">.</span>get_user_content_manager()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">save_blocklist_cb</span>(caller, res, <span style="color:#ff79c6">*</span>args):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># 6: Once saving is done we can retrieve the newly created</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    WebKit2.UserContentFilter with save_finish and finally add th</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    filter to the WebKit2.UserContentManager</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">filter</span> <span style="color:#ff79c6">=</span> filter_store<span style="color:#ff79c6">.</span>save_finish(res)
</span></span><span style="display:flex;"><span>            content_manager<span style="color:#ff79c6">.</span>add_filter(<span style="color:#8be9fd;font-style:italic">filter</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">except</span> GLib<span style="color:#ff79c6">.</span>Error:
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;Error saving blocklist&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">download_blocklist_cb</span>(blocklist: <span style="color:#8be9fd;font-style:italic">str</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># 5: Now that we have the blocklist (as a string containing a json),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    we&#39;ll need to convert it to GLib.Bytes, then save it in the store.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    Yes, we need to save it even if we want to refresh it every time,</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    this is just the way this works.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    This is also async and when it&#39;s done it will call continue on to</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    save_blocklist_cb</span>
</span></span><span style="display:flex;"><span>        filter_store<span style="color:#ff79c6">.</span>save(
</span></span><span style="display:flex;"><span>            BLOCKLIST_ID, GLib<span style="color:#ff79c6">.</span>Bytes<span style="color:#ff79c6">.</span>new(blocklist<span style="color:#ff79c6">.</span>encode()), <span style="color:#ff79c6">None</span>,
</span></span><span style="display:flex;"><span>            save_blocklist_cb
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">download_blocklist</span>():
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># 4: Download the blocklist and continue on to download_blocklist_cb</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>            res <span style="color:#ff79c6">=</span> download_text(blocklist_url)
</span></span><span style="display:flex;"><span>            GLib<span style="color:#ff79c6">.</span>idle_add(download_blocklist_cb, res)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">except</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;Error downloading the blocklist&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">filter_load_cb</span>(caller, res, <span style="color:#ff79c6">*</span>args):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># 2: load_finish will either succeed, and return a</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    WebKit2.UserContentFilter object or raise a GLib.Error in case</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">#    it cannot find the blocklist in the store (ie: on the first run)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">filter</span> <span style="color:#ff79c6">=</span> filter_store<span style="color:#ff79c6">.</span>load_finish(res)
</span></span><span style="display:flex;"><span>            content_manager<span style="color:#ff79c6">.</span>add_filter(<span style="color:#8be9fd;font-style:italic">filter</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">except</span> GLib<span style="color:#ff79c6">.</span>Error:
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4"># 3: If loading the blocklist from the store fails, download the</span>
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4">#    blocklist (async to avoid blocking of course) and save it</span>
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;blocklist store not found, downloading...&#39;</span>)
</span></span><span style="display:flex;"><span>            Thread(target<span style="color:#ff79c6">=</span>download_blocklist, daemon<span style="color:#ff79c6">=</span><span style="color:#ff79c6">True</span>)<span style="color:#ff79c6">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># 1: try to load the blocklist from the store, this is async and will call</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">#    filter_load_cb when it&#39;s done</span>
</span></span><span style="display:flex;"><span>    filter_store<span style="color:#ff79c6">.</span>load(BLOCKLIST_ID, <span style="color:#ff79c6">None</span>, filter_load_cb, <span style="color:#ff79c6">None</span>)
</span></span></code></pre></div><p>I decided to comment the example code above instead of writing disconnected descriptions here, hopefully it makes sense.</p>
<p>This said, if you want to look at the actual code that I&rsquo;m using in Feeds, <a href="https://gitlab.gnome.org/World/gfeeds/-/blob/0a3d3da66d7d4ede155db24fb0f83f03b47f5489/gfeeds/webview.py#L78">you can find it here</a> (this is a snapshot to today&rsquo;s current latest commit, in the future you may want to look at newer code). It contains some logic to automatically refresh or even remove the blocklist.</p>
<p>Let me know what you think in the comments, and feel free to point out any errors, or if something is unclear.</p>
]]></description>
      
        <media:thumbnail url="http://localhost:1313/images/post_pics/Block_ads_in_WebKitGtk/block_ads_webkit.avif" />
      
    </item>
    
    
    
    <item>
      <title>Making a D-Bus Daemon with Python and Flatpak</title>
      <link>http://localhost:1313/posts/making-a-dbus-daemon/</link>
      <pubDate>Sat, 02 Jan 2021 09:42:43 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/making-a-dbus-daemon/</guid>
      <description><![CDATA[<p><em>I learned most of this stuff from <a href="https://larry-price.com/blog/categories/dbus/">this awesome series of articles by Larry Price</a>. Give it a read, it&rsquo;s worth it.</em></p>
<h2 id="why">Why</h2>
<p>D-Bus daemons are quite useful tools. What would you need them for? Well, I decided to add one to <a href="https://hydrapaper.gabmus.org">HydraPaper</a> to do two jobs:</p>
<ol>
<li>change the wallpaper periodically</li>
<li>listen for monitor configuration changes and adapt to it, so that when you plug or unplug a monitor, the wallpaper doesn&rsquo;t get all messed up</li>
</ol>
<p>There could be other reasons, like provide an always active &ldquo;server&rdquo; component to your application, or if you need to send notifications to the user even when your main app isn&rsquo;t running.</p>
<p>Of course possibilities are limitless, it&rsquo;s just another way to create software. <strong>Using D-Bus to create this daemon allows your graphical application to communicate with the main application in an easy and predictable way</strong>.</p>
<p>If you want to read more about D-Bus, I suggest you give a look at <a href="https://venam.nixers.net/blog/unix/2020/07/06/dbus-polkit.html">this nicely written article by Patrick Louis</a>.</p>
<h2 id="how">How</h2>
<p>Now what languages are we gonna use? Ha! Trick question! If you know me (or can read the title) you know we&rsquo;ll be using Python. Besides I&rsquo;m pretty sure you can use whatever language you prefer, but today that&rsquo;s what we&rsquo;re gonna use.</p>
<p>Before we begin, it&rsquo;s good practice to choose a unique id for our daemon using the <a href="https://en.wikipedia.org/wiki/Reverse_domain_name_notation">reverse domain name notation</a>. For the HydraPaper Daemon I chose <code>org.gabmus.hydrapaper.Daemon</code>. It&rsquo;s important that your name is unique, so it&rsquo;s a good practice to name it something like <code>ext.yourPersonalHandle.yourApplicationName.Daemon</code>. Another good idea is if you have a registered domain like I do for <code>gabmus.org</code>, to just use that, followed by the name of your app and some other indication that this service will be a daemon. <a href="https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names">You can read more about valid names here</a>.</p>
<p>Once you have decided this id, just put it in a constant, along with the same but separated by slashes as if it was a path, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>UID         <span style="color:#ff79c6">=</span>  <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon&#39;</span>
</span></span><span style="display:flex;"><span>UID_AS_PATH <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;/org/gabmus/myapp/Daemon&#39;</span>  <span style="color:#6272a4"># notice the leading slash</span>
</span></span></code></pre></div><p>Let&rsquo;s now start with the basics: we need a class extending <code>dbus.service.Object</code>. This will be our <strong>D-Bus Object</strong>, and some of the methods inside of it will be exposed as <strong>D-Bus methods</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> dbus
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">import</span> dbus.service  <span style="color:#6272a4"># yes, you need to import this as well</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>UID         <span style="color:#ff79c6">=</span>  <span style="color:#f1fa8c">&#39;org.gabmus.hydrapaper.Daemon&#39;</span>
</span></span><span style="display:flex;"><span>UID_AS_PATH <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;/org/gabmus/hydrapaper/Daemon&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">MyappDaemon</span>(dbus<span style="color:#ff79c6">.</span>service<span style="color:#ff79c6">.</span>Object):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> __init__(self, bus_name):
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">super</span>()<span style="color:#ff79c6">.</span>__init__(
</span></span><span style="display:flex;"><span>            bus_name, UID_AS_PATH
</span></span><span style="display:flex;"><span>        )
</span></span></code></pre></div><p>Now before moving on, I decided to include the final part here: bootstrapping our main loop and all of the things we need to get this bad boy running, so that you can actually try things out and see what&rsquo;s going on instead of just blindly copy-pasting.</p>
<p>You&rsquo;ll need these additional imports:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">from</span> dbus.mainloop.glib <span style="color:#ff79c6">import</span> DBusGMainLoop
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> gi.repository <span style="color:#ff79c6">import</span> GLib
</span></span></code></pre></div><p>Let&rsquo;s move <strong>to the bottom of the file</strong> and create a main function, just to do things cleanly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">main</span>():
</span></span><span style="display:flex;"><span>    DBusGMainLoop(set_as_default<span style="color:#ff79c6">=</span><span style="color:#ff79c6">True</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        bus_name <span style="color:#ff79c6">=</span> dbus<span style="color:#ff79c6">.</span>service<span style="color:#ff79c6">.</span>BusName(
</span></span><span style="display:flex;"><span>            UID, bus<span style="color:#ff79c6">=</span>dbus<span style="color:#ff79c6">.</span>SessionBus(), do_not_queue<span style="color:#ff79c6">=</span><span style="color:#ff79c6">True</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> dbus<span style="color:#ff79c6">.</span>exceptions<span style="color:#ff79c6">.</span>NameExistsException:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#39;Service with id </span><span style="color:#f1fa8c">{</span>UID<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> is already running&#39;</span>)
</span></span><span style="display:flex;"><span>        exit(<span style="color:#bd93f9">1</span>)
</span></span><span style="display:flex;"><span>    loop <span style="color:#ff79c6">=</span> GLib<span style="color:#ff79c6">.</span>MainLoop()
</span></span><span style="display:flex;"><span>    daemon <span style="color:#ff79c6">=</span> MyappDaemon(bus_name)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        loop<span style="color:#ff79c6">.</span>run()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> KeyboardInterrupt:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;KeyboardInterrupt received&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> Exception <span style="color:#ff79c6">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;Unhandled exception: `</span><span style="color:#f1fa8c">{}</span><span style="color:#f1fa8c">`&#39;</span><span style="color:#ff79c6">.</span>format(<span style="color:#8be9fd;font-style:italic">str</span>(e)))
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">finally</span>:
</span></span><span style="display:flex;"><span>        loop<span style="color:#ff79c6">.</span>quit()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> __name__ <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Alright, let&rsquo;s resume from where we left.</p>
<p>We have a D-Bus object, and the thing can run doing nothing now, awesome.</p>
<p>Let&rsquo;s give this object a method we can invoke from outside.</p>
<p>To do this we&rsquo;ll create a method in our class and decorate it with <code>@dbus.service.method</code>. This decorator takes some parameters:</p>
<ul>
<li><code>dbus_interface</code>: the interface we want this method to be attached to (interfaces are another nesting level for D-Bus, honestly I think they&rsquo;re overkill for this kind of use, so we&rsquo;re just going to use our previously declared <code>UID</code> as the interface, it&rsquo;s gonna work).</li>
<li><code>in_signature</code>: what kind of parameters our method requires</li>
<li><code>out_signature</code>: what kind of output our method returns</li>
</ul>
<p>For the signatures, you can read more about data types you can use <a href="https://dbus.freedesktop.org/doc/dbus-python/tutorial.html#data-types">in this documentation page</a>.</p>
<p>Let&rsquo;s create a simple <code>hello</code> method that takes a string and returns another string.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">MyappDaemon</span>(dbus<span style="color:#ff79c6">.</span>service<span style="color:#ff79c6">.</span>Object):
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>    @dbus.service.method(
</span></span><span style="display:flex;"><span>        dbus_interface<span style="color:#ff79c6">=</span>UID,
</span></span><span style="display:flex;"><span>        in_signature<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;s&#39;</span>, out_signature<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;s&#39;</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">hello</span>(self, your_name: <span style="color:#8be9fd;font-style:italic">str</span>) <span style="color:#ff79c6">-&gt;</span> <span style="color:#8be9fd;font-style:italic">str</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> <span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#39;Hi there, </span><span style="color:#f1fa8c">{</span>your_name<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">!&#39;</span>
</span></span></code></pre></div><p>That&rsquo;s it! Easy, wasn&rsquo;t it?</p>
<p>Now if like me you want to have some action to run every x seconds or something, you can just use the standard threads and sleep model of Python, not much else you need as far as D-Bus goes.</p>
<p>Now, let&rsquo;s see what we need to do to package this new Daemon in a Flatpak and have it being recognized by the system as proper and activatable D-Bus service.</p>
<h2 id="plumbing">Plumbing</h2>
<p>First off, we&rsquo;ll be using meson, so I assume you already are using it for your base application.</p>
<p>Assuming we have our daemon inside a sub-folder called <code>myapp_daemon</code>. For packages reasons I suggest you call the actual daemon Python file something like <code>myappd.in.py</code>. Notice the trailing <code>d</code>, it means daemon. Another thing: <strong>make sure to give this file executable permissions!</strong> (<code>chmod +x myapp_daemon/myappd.in.py</code>)</p>
<p>At the beginning of <code>myappd.in.py</code> we&rsquo;re going to insert our shebang like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6272a4">#!@PYTHON@</span>
</span></span></code></pre></div><p>In our main <code>meson.build</code> file, the one in the root of the project, let&rsquo;s put the following somewhere you feel is appropriate (skip anything that is already there of course):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-meson" data-lang="meson"><span style="display:flex;"><span>prefix <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">get_option</span>(<span style="color:#f1fa8c">&#39;prefix&#39;</span>)
</span></span><span style="display:flex;"><span>datadir <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">get_option</span>(<span style="color:#f1fa8c">&#39;datadir&#39;</span>)
</span></span><span style="display:flex;"><span>libexecdir <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">join_paths</span>(prefix, <span style="color:#8be9fd;font-style:italic">get_option</span>(<span style="color:#f1fa8c">&#39;libexecdir&#39;</span>))
</span></span><span style="display:flex;"><span>etcdir <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">get_option</span>(<span style="color:#f1fa8c">&#39;sysconfdir&#39;</span>)
</span></span><span style="display:flex;"><span>dbus_service_dir <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">dependency</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#39;dbus-1&#39;</span>
</span></span><span style="display:flex;"><span>).get_pkgconfig_variable(
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#39;session_bus_services_dir&#39;</span>,
</span></span><span style="display:flex;"><span>    define_variable: [<span style="color:#f1fa8c">&#39;datadir&#39;</span>, <span style="color:#8be9fd;font-style:italic">join_paths</span>(prefix, datadir)]
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>python <span style="color:#ff79c6">=</span> import(<span style="color:#f1fa8c">&#39;python&#39;</span>)
</span></span><span style="display:flex;"><span>py_installation <span style="color:#ff79c6">=</span> python.find_installation(<span style="color:#f1fa8c">&#39;python3&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> py_installation.found()
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">error</span>(<span style="color:#f1fa8c">&#39;No valid python3 binary found&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">endif</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">subdir</span>(<span style="color:#f1fa8c">&#39;myapp_daemon&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">subdir</span>(<span style="color:#f1fa8c">&#39;data&#39;</span>)
</span></span></code></pre></div><p>Now, let&rsquo;s create <code>myapp_daemon/meson.build</code>, and put this inside:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-meson" data-lang="meson"><span style="display:flex;"><span>daemon_conf <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">configuration_data</span>()
</span></span><span style="display:flex;"><span>daemon_conf.set(<span style="color:#f1fa8c">&#39;PYTHON&#39;</span>, py_installation.path())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">configure_file</span>(
</span></span><span style="display:flex;"><span>    input: meson.project_name() <span style="color:#ff79c6">+</span> <span style="color:#f1fa8c">&#39;d.in.py&#39;</span>,
</span></span><span style="display:flex;"><span>    output: meson.project_name() <span style="color:#ff79c6">+</span> <span style="color:#f1fa8c">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>    install: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>    install_dir: libexecdir,
</span></span><span style="display:flex;"><span>    configuration: daemon_conf
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>That&rsquo;s it for the daemon itself, but we still need some other files to let Flatpak (or your host operating system for that matter if you install this with a regular package manager) recognize this as an activatable service.</p>
<p><em>Note: an activatable service means a service that will be started automagically as soon as an application tries to connect to it.</em></p>
<p>For this, I like to work inside of a new folder called <code>data</code> inside the project root.</p>
<p>Inside <code>data</code> let&rsquo;s create:</p>
<p><code>org.gabmus.myapp.Daemon.desktop.in</code> containing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-desktop" data-lang="desktop"><span style="display:flex;"><span><span style="color:#ff79c6">[Desktop Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">org.gabmus.myapp.Daemon</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Comment</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Daemon for myapp</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Icon</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">org.gabmus.myapp.Daemon</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Exec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">@libexecdir@/myappd</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">X-GNOME-Autostart-Delay</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">10</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">StartupNotify</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">false</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">NoDisplay</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">true</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Type</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Application</span>
</span></span></code></pre></div><p><code>org.gabmus.myapp.Daemon.service.in</code> containing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-desktop" data-lang="desktop"><span style="display:flex;"><span><span style="color:#ff79c6">[D-BUS Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">org.gabmus.myapp.Daemon</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Exec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">@libexecdir@/myappd</span>
</span></span></code></pre></div><p><code>meson.build</code> (if it exists already, just add to it) containing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-meson" data-lang="meson"><span style="display:flex;"><span>data_conf <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">configuration_data</span>()
</span></span><span style="display:flex;"><span>data_conf.set(<span style="color:#f1fa8c">&#39;libexecdir&#39;</span>, libexecdir)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">configure_file</span>(
</span></span><span style="display:flex;"><span>    input: <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon.desktop.in&#39;</span>,
</span></span><span style="display:flex;"><span>    output: <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon.desktop&#39;</span>,
</span></span><span style="display:flex;"><span>    configuration: data_conf,
</span></span><span style="display:flex;"><span>    install: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>    install_dir: <span style="color:#8be9fd;font-style:italic">join_paths</span>(etcdir, <span style="color:#f1fa8c">&#39;xdg&#39;</span>, <span style="color:#f1fa8c">&#39;autostart&#39;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">configure_file</span>(
</span></span><span style="display:flex;"><span>    input: <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon.service.in&#39;</span>,
</span></span><span style="display:flex;"><span>    output: <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon.service&#39;</span>,
</span></span><span style="display:flex;"><span>    configuration: data_conf,
</span></span><span style="display:flex;"><span>    install: <span style="color:#ff79c6">true</span>,
</span></span><span style="display:flex;"><span>    install_dir: dbus_service_dir
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Finally, we need to tell Flatpak that the <code>org.gabmus.myapp.Daemon</code> name is owned by our application. To do this let&rsquo;s add the following to our Flatpak manifest, inside the <code>finish-args</code> array:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;--own-name=org.gabmus.myapp&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f1fa8c">&#34;--own-name=org.gabmus.myapp.Daemon&#34;</span>
</span></span></code></pre></div><p>Great! Now in theory everything should be in place, of course let me know if anything is broken or doesn&rsquo;t work, the comment section is there to be used!</p>
<p>For the final section of this small tutorial, let&rsquo;s see how to call the method we created.</p>
<h2 id="summon-the-daemon">Summon the daemon</h2>
<p>For this last section, I&rsquo;ll just leave you with some very brief example code in Python, hopefully it&rsquo;s easy enough to follow:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> dbus
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">summon_hello</span>(name):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        bus <span style="color:#ff79c6">=</span> dbus<span style="color:#ff79c6">.</span>SessionBus()
</span></span><span style="display:flex;"><span>        obj <span style="color:#ff79c6">=</span> bus<span style="color:#ff79c6">.</span>get_object(
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#f1fa8c">&#39;/org/gabmus/myapp/Daemon&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        interface <span style="color:#ff79c6">=</span> dbus<span style="color:#ff79c6">.</span>Interface(
</span></span><span style="display:flex;"><span>            obj, dbus_interface<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;org.gabmus.myapp.Daemon&#39;</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> interface<span style="color:#ff79c6">.</span>hello(name)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> dbus<span style="color:#ff79c6">.</span>exceptions<span style="color:#ff79c6">.</span>DBusException:
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#39;Failed to communicate with `org.gabmus.myapp.Daemon`!&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> <span style="color:#f1fa8c">&#39;&#39;</span>
</span></span></code></pre></div><hr>
<p>Hope you can find this tutorial useful. Mind you, I&rsquo;m not an expert in this matter, I just did this and failed to find a single tutorial summarizing all of what I needed, so I decided to make one myself.</p>
<p>If you find that anything doesn&rsquo;t work as expected (maybe I missed a step or two?) please let me know in the comments, or contact me directly by using one of the contacts you can find <a href="/pages/about">in the About page</a>.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Map Mouse Back and Forward Buttons in Your GTK App</title>
      <link>http://localhost:1313/posts/map_mouse_back_and_forward_buttons_in_your_gtk_app/</link>
      <pubDate>Thu, 08 Oct 2020 11:39:57 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/map_mouse_back_and_forward_buttons_in_your_gtk_app/</guid>
      <description><![CDATA[<p>The back and forward buttons on your mouse are incredibly useful, at least for me. I use them all the time!</p>
<p>I couldn&rsquo;t find a proper way to map it on my app until I asked on the GTK Matrix chatroom, there <a href="https://github.com/baedert">baedert</a> sent me a couple of links to how he did it in his app corebird.</p>
<p>I translated the code to Python and decided to make a blog post to archive the procedure.</p>
<p>First, here&rsquo;s a function that creates the &ldquo;gesture&rdquo; and assigns it to a widget and a callback function</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">add_mouse_button_accel</span>(widget, function):
</span></span><span style="display:flex;"><span>    gesture <span style="color:#ff79c6">=</span> Gtk<span style="color:#ff79c6">.</span>GestureMultiPress<span style="color:#ff79c6">.</span>new(widget)
</span></span><span style="display:flex;"><span>    gesture<span style="color:#ff79c6">.</span>set_button(<span style="color:#bd93f9">0</span>)
</span></span><span style="display:flex;"><span>    gesture<span style="color:#ff79c6">.</span>set_propagation_phase(Gtk<span style="color:#ff79c6">.</span>PropagationPhase<span style="color:#ff79c6">.</span>CAPTURE)
</span></span><span style="display:flex;"><span>    gesture<span style="color:#ff79c6">.</span>connect(<span style="color:#f1fa8c">&#39;pressed&#39;</span>, function)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> gesture
</span></span></code></pre></div><p>As you may have noticed, this function returns the created gesture. You may think there is no need for it and ideally you&rsquo;d be right.</p>
<p>There&rsquo;s just a small issue: due to something that I could only identify as a bug in GTK, you need to keep the <code>Gtk.GestureMultiPress</code> object around, otherwise it gets destroyed and the button clicks are no longer registered.</p>
<p>Once the gesture is returned, you can assign it to something that stays in memory (or you can modify this function and do something like <code>widget.mouse_accel_gesture = gesture</code> and be done with it).</p>
<p>As for the function associated with the mouse click, here&rsquo;s a template you can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">on_mouse_event</span>(gesture, n_press, x, y):
</span></span><span style="display:flex;"><span>    btn <span style="color:#ff79c6">=</span> gesture<span style="color:#ff79c6">.</span>get_current_button()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> btn <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">8</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Handle the Back button here</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">elif</span> btn <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">9</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Handle the Forward button here</span>
</span></span></code></pre></div><p>There you go, hope it helps. If you have any trouble feel free to leave a comment or contact me (contact info can be found <a href="/pages/about">in the about page</a>)</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Create an auto resizing image widget with GTK3 and Python</title>
      <link>http://localhost:1313/posts/create_an_auto-resizing_image_widget_with_gtk3_and_python/</link>
      <pubDate>Sat, 03 Oct 2020 10:23:54 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/create_an_auto-resizing_image_widget_with_gtk3_and_python/</guid>
      <description><![CDATA[<p>One of the most common things you might wanna do with images, that is making them automatically resize to adapt to the available space they have, is not possible with <code>Gtk.Image</code>.</p>
<p>So after some hacking, I seem to have found a solution that works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">from</span> gi.repository <span style="color:#ff79c6">import</span> Gtk, GdkPixbuf, Gdk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">PictureView</span>(Gtk<span style="color:#ff79c6">.</span>DrawingArea):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> __init__(self, path, <span style="color:#ff79c6">*</span>args, <span style="color:#ff79c6">**</span>kwargs):
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">super</span>()<span style="color:#ff79c6">.</span>__init__(<span style="color:#ff79c6">*</span>args, <span style="color:#ff79c6">**</span>kwargs)
</span></span><span style="display:flex;"><span>        self<span style="color:#ff79c6">.</span>path <span style="color:#ff79c6">=</span> path
</span></span><span style="display:flex;"><span>        self<span style="color:#ff79c6">.</span>pixbuf <span style="color:#ff79c6">=</span> GdkPixbuf<span style="color:#ff79c6">.</span>Pixbuf<span style="color:#ff79c6">.</span>new_from_file(self<span style="color:#ff79c6">.</span>path)
</span></span><span style="display:flex;"><span>        self<span style="color:#ff79c6">.</span>img_surface <span style="color:#ff79c6">=</span> Gdk<span style="color:#ff79c6">.</span>cairo_surface_create_from_pixbuf(
</span></span><span style="display:flex;"><span>            self<span style="color:#ff79c6">.</span>pixbuf, <span style="color:#bd93f9">1</span>, <span style="color:#ff79c6">None</span>
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">get_useful_height</span>(self):
</span></span><span style="display:flex;"><span>        aw <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>get_allocated_width()
</span></span><span style="display:flex;"><span>        pw <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>pixbuf<span style="color:#ff79c6">.</span>get_width()
</span></span><span style="display:flex;"><span>        ph <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>pixbuf<span style="color:#ff79c6">.</span>get_height()
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> aw<span style="color:#ff79c6">/</span>pw <span style="color:#ff79c6">*</span> ph
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">get_scale_factor</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> self<span style="color:#ff79c6">.</span>get_allocated_width() <span style="color:#ff79c6">/</span> self<span style="color:#ff79c6">.</span>pixbuf<span style="color:#ff79c6">.</span>get_width()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">do_draw</span>(self, context):
</span></span><span style="display:flex;"><span>        sf <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>get_scale_factor()
</span></span><span style="display:flex;"><span>        context<span style="color:#ff79c6">.</span>scale(sf, sf)
</span></span><span style="display:flex;"><span>        context<span style="color:#ff79c6">.</span>set_source_surface(self<span style="color:#ff79c6">.</span>img_surface, <span style="color:#bd93f9">0</span>, <span style="color:#bd93f9">0</span>)
</span></span><span style="display:flex;"><span>        context<span style="color:#ff79c6">.</span>paint()
</span></span><span style="display:flex;"><span>        height <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>get_useful_height(self<span style="color:#ff79c6">.</span>get_allocated_width())
</span></span><span style="display:flex;"><span>        self<span style="color:#ff79c6">.</span>set_size_request(<span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span>, height)
</span></span></code></pre></div><p>This code is actually simpler than I imagined, and that&rsquo;s a good thing. Let&rsquo;s see what&rsquo;s going on here.</p>
<p>I&rsquo;m doing all of this in a self contained class I unoriginally called <em>PictureView</em>, of course you can rename it to your liking. It takes a path to a picture as an argument.</p>
<p>I&rsquo;m subclassing <code>Gtk.DrawingArea</code> to be able to draw arbitrary stuff with cairo.</p>
<p>The first thing is creating a base <code>GdkPixbuf.Pixbuf</code> to store the original image, create a cairo surface from that image and then tell the widget what to do inside the <code>do_draw</code> method.</p>
<p>This will in turn find out the size at which it wants to be rendered.</p>
<p>For the width, I want all of it, or in other words all of the allocated width that the widget has.</p>
<p>As for the height, I simply calculate the target height (indicated as <code>allocated_height</code> in the formula below) by solving a simple proportion between the picture width and the allocated width:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>pixbuf_width / allocated_width = pixbuf_height / allocated_height
</span></span></code></pre></div><p>Once I have this useful data, I set the widget size request with the new values I found (I leave the width as -1 so that it doesn&rsquo;t change).</p>
<p>Then, I scale the whole cairo context with the <code>scale</code> method, calculating the scale factor as <code>widget_width / pixbuf_width</code>, and finally set the cairo context source to the image surface I created in the constructor.</p>
<p>Oh, and don&rsquo;t forget to call <code>cairo.paint()</code> as well.</p>
<p>All in all this is pretty straight forward, but you need to know what you&rsquo;re doing, and I certainly did not up to about a couple of hour ago.</p>
<p>Hopefully if you need to do this, you will find this blog post and avoid wasting two hours of your time trying to figure this out from sparse C code floating around the internet.</p>
<hr>
<p>As a final note, I&rsquo;m being told that in GTK4 GtkPicture is able to do this, but since I&rsquo;m still stuck with GTK3 (as you probably are as well if you&rsquo;re reading this), this is the best solution I could find.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Python unittest &#43; Meson</title>
      <link>http://localhost:1313/posts/python-unittest-meson/</link>
      <pubDate>Mon, 11 May 2020 11:27:41 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/python-unittest-meson/</guid>
      <description><![CDATA[<p>Alright, I started writing some unit tests for <a href="https://gabmus.gitlab.io/gnome-feeds">Feeds</a> and I wanted to integrate them into meson, so that I can just run <code>meson test</code> or <code>ninja test</code> during build and have them run automagically.</p>
<p>As an added bonus, they <em>should</em> also run when creating a flatpak package, so that I don&rsquo;t accidentally push a broken built to users.</p>
<p>Here&rsquo;s the very simplistic way I accomplished this task:</p>
<ul>
<li>have your tests in a <code>tests</code> directory in the root of your project</li>
<li>add this to your <code>meson.build</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-meson" data-lang="meson"><span style="display:flex;"><span>envdata <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">environment</span>()
</span></span><span style="display:flex;"><span>python_paths <span style="color:#ff79c6">=</span> [<span style="color:#8be9fd;font-style:italic">join_paths</span>(meson.current_build_dir(), <span style="color:#f1fa8c">&#39;..&#39;</span>)]
</span></span><span style="display:flex;"><span>envdata.append(<span style="color:#f1fa8c">&#39;PYTHONPATH&#39;</span>, python_paths)
</span></span><span style="display:flex;"><span>envdata.append(<span style="color:#f1fa8c">&#39;TESTS_BUILDDIR&#39;</span>, meson.current_build_dir())
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">test</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#f1fa8c">&#39;unit-tests&#39;</span>,
</span></span><span style="display:flex;"><span>  import(<span style="color:#f1fa8c">&#39;python&#39;</span>).find_installation(<span style="color:#f1fa8c">&#39;python3&#39;</span>),
</span></span><span style="display:flex;"><span>  args: [<span style="color:#f1fa8c">&#39;-m&#39;</span>, <span style="color:#f1fa8c">&#39;unittest&#39;</span>, <span style="color:#f1fa8c">&#39;tests&#39;</span>],
</span></span><span style="display:flex;"><span>  env: envdata
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>While this works locally, I&rsquo;m still having problems with running them during the flatpak build in GitLab CI, so I&rsquo;ll try to solve that as well and update this post accordingly.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Feeds moved to World and design overhaul</title>
      <link>http://localhost:1313/posts/feeds-moved-to-world-and-design-overhaul/</link>
      <pubDate>Wed, 11 Sep 2019 12:03:41 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/feeds-moved-to-world-and-design-overhaul/</guid>
      <description><![CDATA[<p>It finally happened, Feeds is now part of the <a href="https://gitlab.gnome.org/World">World</a> group! <a href="https://gitlab.gnome.org/World/gfeeds">Here&rsquo;s the new repository</a>! But don&rsquo;t worry, I&rsquo;ll keep up with the existing GitLab mirror.</p>
<p>This doesn&rsquo;t change too much in terms of development, but it surely makes the app more discoverable. It also provides <a href="https://world.pages.gitlab.gnome.org/gfeeds/">this very nice new URL for Feeds&rsquo; website</a> which is under gnome&rsquo;s domain name (that&rsquo;s pretty cool, uh?).</p>
<p>As for Feeds&rsquo; development, lately I&rsquo;ve begun a process of small cleanups here and there, and most importantly design changes.</p>
<p><img src="/images/post_pics/Feeds-moved-to-World-and-design-overhaul/feeds-next-window.avif" alt="Feeds&rsquo; new UI"></p>
<p>Thanks to the help of <a href="https://gitlab.gnome.org/bertob">Tobias Bernard</a>, <a href="https://gitlab.gnome.org/exalm">Alexander Mikhaylenko</a> and some other awesome people from the <a href="https://matrix.to/#/!nrNOrVsRZxzaDdspgs:talk.puri.sm?via=talk.puri.sm&amp;via=matrix.org&amp;via=librem.one">libhandy community</a>, I brought Feeds back in line with the <a href="https://developer.gnome.org/hig/stable/">GNOME HIG</a>. These are small changes, but surely needed ones to have a more consistent desktop experience.</p>
<p>Some of the features I had planned, detailed in some of my previous posts in this blog, still haven&rsquo;t made it, tho. To be fair, some of them require a decent amount of work, and I&rsquo;d be nice if someone wanted to help with implementing them.</p>
<p>That&rsquo;s why I&rsquo;ll try to cleanup the code more, using Glade templates where possible, splitting different classes in different files and uncluttering the logic a bit. It&rsquo;s probably one of the most boring things you could do, but if I want people to contribute, it has to happen.</p>
<p>That&rsquo;s it for now, stay tuned.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Feeds 0.8: naming change and how to deal with Flatpak</title>
      <link>http://localhost:1313/posts/feeds-0-8-naming-change-and-how-to-deal-with-flatpak/</link>
      <pubDate>Tue, 03 Sep 2019 16:34:14 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/feeds-0-8-naming-change-and-how-to-deal-with-flatpak/</guid>
      <description><![CDATA[<p><a href="https://flathub.org/apps/details/org.gabmus.gfeeds">Feeds version 0.8 is coming</a>. This release have been a little overdue, since I finally decided to change the name of the app from <code>gnome-feeds</code> to just <code>gfeeds</code>. This has to do with the use of the GNOME name, and besides even GNOME apps don&rsquo;t use the <em>GNOME</em> prefix in their names.</p>
<p>Someone criticized the name <code>gfeeds</code>, because it&rsquo;s kind of dumb to have GNOME/GTK app names to start with a <em>g</em>, similarly to how dumb it is to have KDE apps start with a <em>k</em>. But here&rsquo;s the catch: the <em>g</em> in <code>gfeeds</code> stands for <em>Gabriele</em>, <em>I pulled a sneaky on you</em>.</p>
<p>Anyway, the new name should have no problems whatsoever, and besides I learned how to transition to a new appid on Flathub.</p>
<p>It&rsquo;s not as seamless as you would think, but it&rsquo;s easy enough. You&rsquo;ll have to re-submit your app as if it was a new one, and specify that it&rsquo;s just an appid change. There&rsquo;s some infrastructure in place to transition from one appid to another automagically, and it involves <a href="https://github.com/flathub/org.gabmus.gnome-feeds">a little extra json file</a> in the old repo. <a href="https://github.com/flathub/flathub/pull/1141">Here you can see my PR for the new appid</a> and the whole discussion around it. Hope it helps.</p>
<p>As for new stuff, let&rsquo;s see what we have:</p>
<ul>
<li>More stability, broken feeds are automatically removed and error messages will be shown in an upcoming version (already in <code>master</code>).</li>
<li>OPML file association. Now you can just open your OPMLs from your file manager and have them imported in Feeds.</li>
<li>If you&rsquo;re offline, feeds won&rsquo;t be refreshed. Instead, an infobar will tell you that you&rsquo;re offline. Saved articles are still accessible.</li>
<li>CPU utilization is now lower, having removed some unnecessary busy waits from the code.</li>
</ul>
<p>That&rsquo;s it for now. Again, still a lot of work to do, but little by little Feeds is coming together pretty well.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Feeds 0.7 and more features to come</title>
      <link>http://localhost:1313/posts/feeds-0-7-and-more-features-to-come/</link>
      <pubDate>Fri, 23 Aug 2019 11:51:36 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/feeds-0-7-and-more-features-to-come/</guid>
      <description><![CDATA[<p><a href="https://flathub.org/apps/details/org.gabmus.gnome-feeds">Feeds version 0.7 should be out soon</a> with all the features detailed in <a href="/2019/08/20/Feeds-saving-articles-offline-and-marking-stuff-as-read/">this post</a>.</p>
<p>The code starts to feel a little more complex, and it would probably use another small refactoring, but that&rsquo;s not too important right now.</p>
<p>Let&rsquo;s lay out a new roadmap, with the features I implemented, and some new ones I want to add:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <del>Read and unread articles</del></li>
<li><input disabled="" type="checkbox"> Keeping history of older articles locally (still not sure if I actually want this or not)</li>
<li><input disabled="" type="checkbox"> Adblocking</li>
<li><input checked="" disabled="" type="checkbox"> <del>Saving articles</del></li>
<li><input disabled="" type="checkbox"> Suggestions</li>
<li><input disabled="" type="checkbox"> Integration with GNOME Online Accounts</li>
<li><input disabled="" type="checkbox"> <a href="https://gitlab.gnome.org/GabMus/gnome-feeds/issues/4">Integration with TTRSS</a></li>
<li><input disabled="" type="checkbox"> Ability to open rss links and OPML files</li>
<li><input disabled="" type="checkbox"> <em>Offline mode</em> with a banner indicating that the system is offline</li>
</ul>
<p>There&rsquo;s still some work to do. Of course any help is welcome and appreciated.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Feeds 0.6 and future roadmap</title>
      <link>http://localhost:1313/posts/feeds-0-6-and-roadmap-md/</link>
      <pubDate>Mon, 12 Aug 2019 09:51:13 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/feeds-0-6-and-roadmap-md/</guid>
      <description><![CDATA[<p><a href="https://flathub.org/apps/details/org.gabmus.gnome-feeds">Feeds version 0.6 is out</a> with two important changes:</p>
<ul>
<li>German translation thanks to <a href="https://gitlab.com/etamuk">@Etamuk</a></li>
<li>Concurrent feeds refresh</li>
</ul>
<p>About the translation, I know when a project starts becoming interesting, people want to contribute. And translations are in my experience one of the indication of people really getting passionate.</p>
<p>I am really flattered by this contribution and it really means a lot to see this project getting some love.</p>
<p>Moving on to the more technical stuff, concurrent refresh or parallel refresh.</p>
<p>It was surprisingly easy to implement, and that really shows how important having a modular and well-thought-out code structure is.</p>
<p>You see, the feed download and object creation (along with the creation of all the feed items) happens asynchronously already, but adding that feed, and all of its articles to the active lists doesn&rsquo;t. There is this wonderful function <code>GLib.idle_add(function, *args)</code> that makes this whole process so easy and elegant. This function does no more than telling the main thread to run <code>function(*args)</code> whenever it can, no rush (although to a human it&rsquo;s almost instantaneous). With this method the GUI thread doesn&rsquo;t get interrupted and the UI doesn&rsquo;t freeze, but the function is still ran synchronously to it, avoiding any problems of mutual exclusion to precious variables.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6272a4"># https://gitlab.com/gabmus/gnome-feeds/blob/0.6/gfeeds/feeds_manager.py#L139</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">FeedsManager</span>(metaclass<span style="color:#ff79c6">=</span>Singleton):
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">refresh</span>(self, <span style="color:#ff79c6">*</span>args):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>        threads_pool <span style="color:#ff79c6">=</span> []
</span></span><span style="display:flex;"><span>        threads_alive <span style="color:#ff79c6">=</span> []
</span></span><span style="display:flex;"><span>        MAX_THREADS <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>confman<span style="color:#ff79c6">.</span>conf[<span style="color:#f1fa8c">&#39;max_refresh_threads&#39;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> f_link <span style="color:#ff79c6">in</span> self<span style="color:#ff79c6">.</span>confman<span style="color:#ff79c6">.</span>conf[<span style="color:#f1fa8c">&#39;feeds&#39;</span>]:
</span></span><span style="display:flex;"><span>            t <span style="color:#ff79c6">=</span> threading<span style="color:#ff79c6">.</span>Thread(
</span></span><span style="display:flex;"><span>                group <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">None</span>,
</span></span><span style="display:flex;"><span>                target <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">.</span>_add_feed_async_worker,
</span></span><span style="display:flex;"><span>                name <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">None</span>,
</span></span><span style="display:flex;"><span>                args <span style="color:#ff79c6">=</span> (f_link, <span style="color:#ff79c6">True</span>)
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>            threads_pool<span style="color:#ff79c6">.</span>append(t)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">while</span> <span style="color:#8be9fd;font-style:italic">len</span>(threads_pool) <span style="color:#ff79c6">&gt;</span> <span style="color:#bd93f9">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">len</span>(threads_alive) <span style="color:#ff79c6">&lt;</span> MAX_THREADS:
</span></span><span style="display:flex;"><span>                t <span style="color:#ff79c6">=</span> threads_pool<span style="color:#ff79c6">.</span>pop(<span style="color:#bd93f9">0</span>)
</span></span><span style="display:flex;"><span>                t<span style="color:#ff79c6">.</span>start()
</span></span><span style="display:flex;"><span>                threads_alive<span style="color:#ff79c6">.</span>append(t)
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">for</span> i, t <span style="color:#ff79c6">in</span> <span style="color:#8be9fd;font-style:italic">enumerate</span>(threads_alive):
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">not</span> t<span style="color:#ff79c6">.</span>is_alive():
</span></span><span style="display:flex;"><span>                    threads_alive<span style="color:#ff79c6">.</span>pop(i)
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">while</span> t<span style="color:#ff79c6">.</span>is_alive():
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">while</span> Gtk<span style="color:#ff79c6">.</span>events_pending():
</span></span><span style="display:flex;"><span>                    Gtk<span style="color:#ff79c6">.</span>main_iteration()
</span></span></code></pre></div><p>This is the wonderful code that manages the parallel refresh. It&rsquo;s fairly straight forward, it keeps a pool of threads to run, and runs n of them at a time, where n is the maximum number of threads set by the user (defaults to a very mild 2).</p>
<p>Apart from making the refresh process faster by itself, it also reduces the impact of problems like one feed taking longer than the others to download or parse. It&rsquo;s not a likely occurrence, but if and when it happens, it doesn&rsquo;t injure the user experience too much. That&rsquo;s because the slow feed is being processed in its own thread, but the whole refresh operation doesn&rsquo;t have to wait on it.</p>
<p>Moving on, I wanted to lay out a roadmap of where I want Feeds to go in the future.</p>
<ul>
<li><strong>Read and unread articles</strong>: currently Feeds doesn&rsquo;t keep track of your actions, and if you did or didn&rsquo;t read an article. This would require some strcuture, like the serialization and deserialization of articles to a skinnier, more targeted data structure (probably something like tsv or json, but the latter is more likely)</li>
<li><strong>Keeping history of older articles locally</strong>: rss feeds typically don&rsquo;t contain the whole archive, mostly because the resulting file would be huge and unwieldy. But people may want to be able to re-read articles they saw some time prior. That&rsquo;s why there needs to be an option to store them up to the user&rsquo;s preference. Again, this needs serialization/deserialization as described in the bullet point above</li>
<li><strong>Adblocking</strong>: this speaks for itself. Modern websites are a mess, disabling JavaScript helps, but it&rsquo;s neither a soltion nor a silver bullet</li>
<li><strong>Saving articles</strong>: kinda like bookmarks, but not quite. Let&rsquo;s say you add this awesome blog to your feeds, and you read a super interesting article about how to make feeds refreshing concurrent with just a bunch of lines of code. You surely want to save that! I mean, it could be useful someday right? That&rsquo;s a likely usecase for me. Also, you&rsquo;d wanna keep it offline as well, just in case you need it when you&rsquo;re on a plane or something</li>
<li><strong>Suggestions</strong>: many online news readers give you suggestions on what to follow. It&rsquo;s an interesing feature and I&rsquo;d want to add that. People are so addicted and accustomed to social media websites that this is what they expect news consumption to be.</li>
<li><strong>Integration with GNOME Online Accounts</strong>: mostly to be able to sync with services like Nextcloud News. Would be a hell of a feature.</li>
</ul>
<p>And that&rsquo;s it folks. This is the list of what I&rsquo;d want to accomplish with Feeds. Not all of these features are easy, and some are prone to make the whole app slower, and that&rsquo;s one thing I 100% want to avoid.</p>
]]></description>
      
        <media:thumbnail url="https://gitlab.com/gabmus/gnome-feeds/raw/0.6/data/icons/org.gabmus.gnome-feeds.svg" />
      
    </item>
    
    
  </channel>
</rss>
