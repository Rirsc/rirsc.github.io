<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Terminal on RIRSC</title>
    <link>http://localhost:1313/tags/terminal/</link>
    <description>Recent content in Terminal on RIRSC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ricardo LÃ³pez</copyright>
    <lastBuildDate>Tue, 21 May 2024 07:32:14 +0100</lastBuildDate><atom:link href="http://localhost:1313/tags/terminal/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/Rirsc_Logo.svg</icon>
    
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://localhost:1313/posts/240521_markdown/</link>
      <pubDate>Tue, 21 May 2024 07:32:14 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/240521_markdown/</guid>
      <description><![CDATA[<h1 id="markdown-syntax-guide">Markdown Syntax Guide</h1>
<h2 id="1-headlines">1. Headlines</h2>
<h1 id="h1---this-is-a-level-1-heading">H1 - This is a level 1 heading</h1>
<h2 id="h2---this-is-a-level-2-heading">H2 - This is a level 2 heading</h2>
<h3 id="h3---this-is-a-level-3-heading">H3 - This is a level 3 heading</h3>
<h4 id="h4---this-is-a-level-4-heading">H4 - This is a level 4 heading</h4>
<h5 id="h5---this-is-a-level-5-heading">H5 - This is a level 5 heading</h5>
<h6 id="h6---this-is-a-level-6-heading">H6 - This is a level 6 heading</h6>
<h2 id="2-text-formatting">2. Text Formatting</h2>
<ul>
<li><strong>Bold text</strong>: <code>**Bold**</code> or <code>__Bold__</code></li>
<li><em>Italic text</em>: <code>*Italic*</code> or <code>_Italic_</code></li>
<li><em><strong>Bold and Italic</strong></em>: <code>***Bold and Italic***</code> or <code>___Bold and Italic___</code></li>
<li><del>Strikethrough</del>: <code>~~Strikethrough~~</code></li>
<li><code>Inline code</code>: <code>`Inline code`</code></li>
</ul>
<h2 id="3-lists">3. Lists</h2>
<h3 id="unordered-list">Unordered List</h3>
<ul>
<li>Item 1
<ul>
<li>Subitem 1</li>
<li>Subitem 2</li>
</ul>
</li>
<li>Item 2</li>
</ul>
<h3 id="ordered-list">Ordered List</h3>
<ol>
<li>First item</li>
<li>Second item
<ol>
<li>Subitem 1</li>
<li>Subitem 2</li>
</ol>
</li>
</ol>
<h3 id="task-list">Task List</h3>
<ul>
<li><input checked="" disabled="" type="checkbox"> Completed task</li>
<li><input disabled="" type="checkbox"> Incomplete task</li>
</ul>
<h2 id="4-links">4. Links</h2>
<ul>
<li><a href="https://www.openai.com">OpenAI</a></li>
<li><a href="./path/to/file.md">Relative link to a file</a></li>
</ul>
<h2 id="5-images">5. Images</h2>
<p><img src="https://via.placeholder.com/150" alt="Alt text" title="Optional title"></p>
<h2 id="6-blockquotes">6. Blockquotes</h2>
<blockquote>
<p>This is a blockquote.</p>
<ul>
<li>It can contain other elements like lists.</li>
<li><strong>Formatting</strong> is possible.</li>
</ul>
</blockquote>
<h2 id="7-code-blocks">7. Code Blocks</h2>
<h3 id="inline-code">Inline Code</h3>
<p>Use <code>print(&quot;Hello, World!&quot;)</code> to print a message.</p>
<h3 id="fenced-code-block">Fenced Code Block</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">hello_world</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">print</span>(<span style="color:#f1fa8c">&#34;Hello, World!&#34;</span>)
</span></span></code></pre></div><h2 id="8-tables">8. Tables</h2>
<table>
<thead>
<tr>
<th>Syntax</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Header</td>
<td>Title</td>
</tr>
<tr>
<td>Paragraph</td>
<td>Text</td>
</tr>
</tbody>
</table>
<h3 id="complex-table">Complex Table</h3>
<table>
<thead>
<tr>
<th>Header 1</th>
<th>Header 2</th>
<th>Header 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Row 1, Col 1</td>
<td>Row 1, Col 2</td>
<td>Row 1, Col 3</td>
</tr>
<tr>
<td>Row 2, Col 1</td>
<td>Row 2, Col 2</td>
<td>Row 2, Col 3</td>
</tr>
<tr>
<td>Row 3, Col 1</td>
<td>Row 3, Col 2</td>
<td>Row 3, Col 3</td>
</tr>
</tbody>
</table>
<h2 id="9-horizontal-rule">9. Horizontal Rule</h2>
<hr>
<h2 id="10-inline-html">10. Inline HTML</h2>
<p>This is an inline HTML paragraph.</p>
<h2 id="11-escaping-characters">11. Escaping Characters</h2>
<p>Use a backslash (<code>\</code>) to escape special Markdown characters:</p>
<ul>
<li>*escaped asterisk*</li>
<li>_escaped underscore_</li>
<li>`escaped backtick`</li>
<li>\escaped backslash\</li>
</ul>
<h2 id="12-footnotes">12. Footnotes</h2>
<p>Here is a footnote reference<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="13-definition-lists">13. Definition Lists</h2>
<dl>
<dt>Term</dt>
<dd>Definition of the term</dd>
<dt>Another Term</dt>
<dd>Another definition</dd>
</dl>
<h2 id="14-emojis">14. Emojis</h2>
<p>You can use emojis in your Markdown:</p>
<ul>
<li>:smile:</li>
<li>:thumbsup:</li>
<li>:sparkles:</li>
</ul>
<h2 id="15-math-expressions">15. Math Expressions</h2>
<p>Inline math: $E = mc^2$</p>
<p>Block math:
$$
\sum_{i=1}^n (a_i + b_i)
$$</p>
<h2 id="16-extended-syntax-if-supported">16. Extended Syntax (if supported)</h2>
<h3 id="task-lists">Task Lists</h3>
<ul>
<li><input disabled="" type="checkbox"> Task 1</li>
<li><input checked="" disabled="" type="checkbox"> Task 2</li>
</ul>
<h3 id="emoji">Emoji</h3>
<p>You can use emoji like :smiley: :+1: :sparkles:</p>
<h3 id="highlight">Highlight</h3>
<p>==Highlighted text==</p>
<h2 id="17-embedded-media">17. Embedded Media</h2>
<h3 id="youtube-video">YouTube Video</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/VIDEO_ID" frameborder="0" allowfullscreen></iframe>
<h3 id="bandcamp-song">Bandcamp Song</h3>
<iframe style="border: 0; width: 100%; height: 120px;" src="https://bandcamp.com/EmbeddedPlayer/album=3943313878/size=large/bgcol=ffffff/linkcol=0687f5/tracklist=false/artwork=small/transparent=true/" seamless><a href="https://nzenze.bandcamp.com/album/adzi-akal">Adzi Akal by NZE NZE</a></iframe>
<h3 id="spotify-song">Spotify Song</h3>
<iframe src="https://open.spotify.com/embed/track/TRACK_ID" width="300" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is the footnote.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Command line options with Relm4</title>
      <link>http://localhost:1313/posts/240207_command_line_options_with_relm4/</link>
      <pubDate>Wed, 07 Feb 2024 07:32:14 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/240207_command_line_options_with_relm4/</guid>
      <description><![CDATA[<p>I&rsquo;ve been using <a href="https://relm4.org/">Relm4</a> for a project and it&rsquo;s been pretty great. Relm4 is basically a wrapper around the GTK API that offers a more declarative layer of abstraction for building applications.</p>
<p>The only problem I find is that the project seems a little bit niche. Don&rsquo;t get me wrong, it seems very polished and so far I haven&rsquo;t found any bugs, so that&rsquo;s exceptional considering the scope of the project. The real problem with it being niche is that of course not every use case can be fully covered and documented, so some stuff you just have to figure out for yourself.</p>
<p>This was the case for me with command line options.</p>
<p>You might know that GTK offers a way to manage command line options out of the box, but Relm4 simply doesn&rsquo;t wrap that particular API. After a bit of research I found a good way to make it all work and here&rsquo;s how.</p>
<p>So given a struct named <code>MyAppComponent</code> being your root Relm4 component:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">let</span> app <span style="color:#ff79c6">=</span> gtk4::Application::builder()
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// set other properties as needed...
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    .flags(gtk4::gio::ApplicationFlags::HANDLES_COMMAND_LINE)
</span></span><span style="display:flex;"><span>    .build();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// don&#39;t know if this really MUST be static, but that&#39;s what works for me
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">static</span> BROKER: <span style="color:#50fa7b">relm4</span>::MessageBroker<span style="color:#ff79c6">&lt;</span>MyAppComponent::Input<span style="color:#ff79c6">&gt;</span> <span style="color:#ff79c6">=</span> relm4::MessageBroker::new();
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// this is just an example, here&#39;s the documentation for the Gio.Application API
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">// https://docs.gtk.org/gio/method.Application.add_main_option.html
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>app.add_main_option(
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;foo&#34;</span>,
</span></span><span style="display:flex;"><span>    gtk4::glib::Char::try_from(<span style="color:#f1fa8c">&#39;f&#39;</span>).unwrap(),
</span></span><span style="display:flex;"><span>    gtk4::glib::OptionFlags::IN_MAIN,
</span></span><span style="display:flex;"><span>    gtk4::glib::OptionArg::<span style="color:#8be9fd;font-style:italic">None</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;foo option description here&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">None</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span><span style="color:#6272a4">// add as many options as you want
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">let</span> sender <span style="color:#ff79c6">=</span> BROKER.sender(); <span style="color:#6272a4">// we&#39;ll move this to the signal handler below
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>app.connect_command_line(<span style="color:#ff79c6">move</span> <span style="color:#ff79c6">|</span>this, cmdline<span style="color:#ff79c6">|</span> {
</span></span><span style="display:flex;"><span>    this.activate();
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// very basic example, what I actually did was parse the
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#6272a4">// ApplicationCommandLine object and save my flags in an ad-hoc struct
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#6272a4">// but this should also just work
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    sender.emit(MyAppComponent::Input::HandleCommandLine(cmdline));
</span></span><span style="display:flex;"><span>    <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">let</span> relm_app <span style="color:#ff79c6">=</span> relm4::RelmApp::from_app(app).with_broker(<span style="color:#ff79c6">&amp;</span>BROKER);
</span></span><span style="display:flex;"><span>relm_app.run::<span style="color:#ff79c6">&lt;</span>MyAppComponent<span style="color:#ff79c6">&gt;</span>(MyAppComponent::Init {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// your init data here
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>});
</span></span></code></pre></div><p>All you need now is a handler for the <code>HandleCommandLine</code> input signal in your app component and you&rsquo;re pretty much all set.</p>
<p>This is very much a simplified example of what I&rsquo;m actually doing, but it should serve as a good base to build on top of. Being that this was previously completely undocumented, at least it&rsquo;s a starting point.</p>
<p>Feel free to comment if you have found a better solution or if somehow I missed some critical piece of documentation that explains the actual way to do this.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Raspberry Pi Pico pinout in your terminal</title>
      <link>http://localhost:1313/posts/raspberry_pi_pico_pinout_in_your_terminal/</link>
      <pubDate>Tue, 09 Mar 2021 13:14:27 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/raspberry_pi_pico_pinout_in_your_terminal/</guid>
      <description><![CDATA[<p>I&rsquo;m playing around with the new <a href="https://www.raspberrypi.org/products/raspberry-pi-pico">Raspberry Pi Pico</a>, and I quickly realized that I&rsquo;d really love to have a quick pinout reference in my terminal.</p>
<p>I thought of making a man page, but I would have lost the color (I don&rsquo;t know how to use arbitrary colors in groff), so I just created a simple text file with ascii escape sequences for colors and called it a day. It works, and it&rsquo;s pretty!</p>
<p>I&rsquo;m uploading it here for your convenience (and mine as well), you should be able to grab it from your *NIX box by just typing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>curl https://gabmus.org/pico_pinout
</span></span></code></pre></div><p>If you want to save it in a file, just add <code>&gt; some_file_name</code> to the above.</p>
]]></description>
      
        <media:thumbnail url="http://localhost:1313/images/post_pics/Raspberry_Pi_Pico_pinout_in_your_terminal/screenshot.avif" />
      
    </item>
    
    
  </channel>
</rss>
